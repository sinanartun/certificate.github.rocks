{"version":3,"sources":["tabfocus/plugin.js"],"names":["domGlobals","global","tinymce","util","Tools","resolve","global$1","global$2","global$3","global$4","global$5","global$6","Settings","getTabFocus","editor","getParam","getTabFocusElements","DOM","tabCancel","e","keyCode","TAB","ctrlKey","altKey","metaKey","preventDefault","Keyboard","setup","tabHandler","x","el","v","i","isDefaultPrevented","explode","length","shiftKey","find","get","focusEditor","id","name","focus","setTimeout","webkit","window","direction","canSelect","test","tagName","tabIndex","canSelectRecursive","nodeName","type","style","display","visibility","parentNode","select","each","on","inline","setAttrib","getBody","gecko","add"],"mappings":"CAQC,SAAUA,GACP,aAEA,IAAIC,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,yBAEtCG,EAAWN,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCI,EAAWP,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCK,EAAWR,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCM,EAAWT,QAAQC,KAAKC,MAAMC,QAAQ,mBAQtCO,EAAW,CAAEC,YAHC,SAAUC,GAC1B,OAAOA,EAAOC,SAAS,YAJC,SAAUD,GAClC,OAAOA,EAAOC,SAAS,oBAAqB,eAGRC,CAAoBF,MAItDG,EAAMX,EAASW,IACfC,EAAY,SAAUC,GACpBA,EAAEC,UAAYT,EAASU,KAAQF,EAAEG,SAAYH,EAAEI,QAAWJ,EAAEK,SAC9DL,EAAEM,kBAmFFC,EAAW,CAAEC,MAhFL,SAAUb,GACpB,SAASc,EAAWT,GAClB,IAAIU,EAAGC,EAAIC,EAAGC,EACd,KAAIb,EAAEC,UAAYT,EAASU,KAAOF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,SAAWL,EAAEc,wBAiCzD,KADjBF,EAAIrB,EAASwB,QAAQtB,EAASC,YAAYC,KACpCqB,SACJJ,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK,SAILD,EAFAX,EAAEiB,SACS,UAATL,EAAE,GACCM,GAAM,GAENpB,EAAIqB,IAAIP,EAAE,IAGJ,UAATA,EAAE,GACCM,EAAK,GAELpB,EAAIqB,IAAIP,EAAE,KAGX,CACN,IAAIQ,EAAchC,EAAS+B,IAAIR,EAAGU,IAAMV,EAAGW,MACvCX,EAAGU,IAAMD,EACXA,EAAYG,QAEZjC,EAASkC,WAAW,WACbnC,EAASoC,QACZ5C,EAAW6C,OAAOH,QAEpBZ,EAAGY,SACF,IAELvB,EAAEM,iBA3DJ,SAASY,EAAKS,GAKZ,SAASC,EAAUjB,GACjB,MAAO,wBAAwBkB,KAAKlB,EAAGmB,UAAY1C,EAAS+B,IAAInB,EAAEqB,MAAwB,IAAjBV,EAAGoB,UAJ9E,SAASC,EAAmBhC,GAC1B,MAAsB,SAAfA,EAAEiC,UAAkC,WAAXjC,EAAEkC,MAAyC,SAApBlC,EAAEmC,MAAMC,SAA6C,WAAvBpC,EAAEmC,MAAME,YAA2BL,EAAmBhC,EAAEsC,YAG9CN,CAAmBrB,GAQpH,GAbAA,EAAKb,EAAIyC,OAAO,0CAOhBhD,EAASiD,KAAK7B,EAAI,SAAUX,EAAGa,GAC7B,GAAIb,EAAEqB,KAAO1B,EAAO0B,GAElB,OADAX,EAAIG,GACG,IAGPc,EAAY,GACd,IAAKd,EAAIH,EAAI,EAAGG,EAAIF,EAAGK,OAAQH,IAC7B,GAAIe,EAAUjB,EAAGE,IACf,OAAOF,EAAGE,QAId,IAAKA,EAAIH,EAAI,EAAGG,GAAK,EAAGA,IACtB,GAAIe,EAAUjB,EAAGE,IACf,OAAOF,EAAGE,GAIhB,OAAO,MAmCXlB,EAAO8C,GAAG,OAAQ,WACZ9C,EAAO+C,QACT5C,EAAI6C,UAAUhD,EAAOiD,UAAW,WAAY,MAE9CjD,EAAO8C,GAAG,QAAS1C,GACfV,EAASwD,MACXlD,EAAO8C,GAAG,mBAAoBhC,GAE9Bd,EAAO8C,GAAG,UAAWhC,OAOzB3B,EAAOgE,IAAI,WAAY,SAAUnD,GAC/BY,EAASC,MAAMb,KAnHvB,CAyHE+B","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function (domGlobals) {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getTabFocusElements = function (editor) {\n      return editor.getParam('tabfocus_elements', ':prev,:next');\n    };\n    var getTabFocus = function (editor) {\n      return editor.getParam('tab_focus', getTabFocusElements(editor));\n    };\n    var Settings = { getTabFocus: getTabFocus };\n\n    var DOM = global$1.DOM;\n    var tabCancel = function (e) {\n      if (e.keyCode === global$6.TAB && !e.ctrlKey && !e.altKey && !e.metaKey) {\n        e.preventDefault();\n      }\n    };\n    var setup = function (editor) {\n      function tabHandler(e) {\n        var x, el, v, i;\n        if (e.keyCode !== global$6.TAB || e.ctrlKey || e.altKey || e.metaKey || e.isDefaultPrevented()) {\n          return;\n        }\n        function find(direction) {\n          el = DOM.select(':input:enabled,*[tabindex]:not(iframe)');\n          function canSelectRecursive(e) {\n            return e.nodeName === 'BODY' || e.type !== 'hidden' && e.style.display !== 'none' && e.style.visibility !== 'hidden' && canSelectRecursive(e.parentNode);\n          }\n          function canSelect(el) {\n            return /INPUT|TEXTAREA|BUTTON/.test(el.tagName) && global$2.get(e.id) && el.tabIndex !== -1 && canSelectRecursive(el);\n          }\n          global$5.each(el, function (e, i) {\n            if (e.id === editor.id) {\n              x = i;\n              return false;\n            }\n          });\n          if (direction > 0) {\n            for (i = x + 1; i < el.length; i++) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          } else {\n            for (i = x - 1; i >= 0; i--) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          }\n          return null;\n        }\n        v = global$5.explode(Settings.getTabFocus(editor));\n        if (v.length === 1) {\n          v[1] = v[0];\n          v[0] = ':prev';\n        }\n        if (e.shiftKey) {\n          if (v[0] === ':prev') {\n            el = find(-1);\n          } else {\n            el = DOM.get(v[0]);\n          }\n        } else {\n          if (v[1] === ':next') {\n            el = find(1);\n          } else {\n            el = DOM.get(v[1]);\n          }\n        }\n        if (el) {\n          var focusEditor = global$2.get(el.id || el.name);\n          if (el.id && focusEditor) {\n            focusEditor.focus();\n          } else {\n            global$4.setTimeout(function () {\n              if (!global$3.webkit) {\n                domGlobals.window.focus();\n              }\n              el.focus();\n            }, 10);\n          }\n          e.preventDefault();\n        }\n      }\n      editor.on('init', function () {\n        if (editor.inline) {\n          DOM.setAttrib(editor.getBody(), 'tabIndex', null);\n        }\n        editor.on('keyup', tabCancel);\n        if (global$3.gecko) {\n          editor.on('keypress keydown', tabHandler);\n        } else {\n          editor.on('keydown', tabHandler);\n        }\n      });\n    };\n    var Keyboard = { setup: setup };\n\n    function Plugin () {\n      global.add('tabfocus', function (editor) {\n        Keyboard.setup(editor);\n      });\n    }\n\n    Plugin();\n\n}(window));\n"]}