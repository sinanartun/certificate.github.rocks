{"version":3,"sources":["nonbreaking/plugin.js"],"names":["global","tinymce","util","Tools","resolve","Settings","editor","spaces","getParam","stringRepeat","string","repeats","str","index","Actions","times","html","plugins","visualchars","isEnabled","nbspSpan","undoManager","transact","insertContent","Commands","register","addCommand","global$1","Keyboard","setup","on","e","keyCode","TAB","isDefaultPrevented","shiftKey","preventDefault","stopImmediatePropagation","Buttons","ui","registry","addButton","icon","tooltip","onAction","execCommand","addMenuItem","text","add"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAapCC,EAXoB,SAAUC,GAChC,IAAIC,EAASD,EAAOE,SAAS,wBAAyB,GACtD,MAAsB,kBAAXD,GACS,IAAXA,EAAkB,EAAI,EAEtBA,GAMPF,EAHY,SAAUC,GACxB,OAAOA,EAAOE,SAAS,oBAAoB,EAAM,YAO/CC,EAAe,SAAUC,EAAQC,GAEnC,IADA,IAAIC,EAAM,GACDC,EAAQ,EAAGA,EAAQF,EAASE,IACnCD,GAAOF,EAET,OAAOE,GAkBLE,EAba,SAAUR,EAAQS,GACjC,IAOIC,EADaX,EAAmBC,IACXA,EAAOW,QAAQC,YAJzB,WACb,MAAO,kBAR0BZ,EAKLA,GAJhBW,QAAQC,aAAcZ,EAAOW,QAAQC,YAAYC,YAIvB,yBAA2B,iBAG5B,6BAA+BV,EAAa,SAAUM,GAAS,UAR7E,IAAUT,EAWmBc,GAAaX,EAAa,SAAUM,GAC1FT,EAAOe,YAAYC,SAAS,WAC1B,OAAOhB,EAAOiB,cAAcP,MAU5BQ,EAAW,CAAEC,SALF,SAAUnB,GACvBA,EAAOoB,WAAW,iBAAkB,WAClCZ,EAAmBR,EAAQ,OAK3BqB,EAAW1B,QAAQC,KAAKC,MAAMC,QAAQ,mBAiBtCwB,EAAW,CAAEC,MAfL,SAAUvB,GACpB,IAAIC,EAASF,EAA2BC,GACpCC,EAAS,GACXD,EAAOwB,GAAG,UAAW,SAAUC,GAC7B,GAAIA,EAAEC,UAAYL,EAASM,MAAQF,EAAEG,qBAAsB,CACzD,GAAIH,EAAEI,SACJ,OAEFJ,EAAEK,iBACFL,EAAEM,2BACFvB,EAAmBR,EAAQC,QAuB/B+B,EAAU,CAAEb,SAhBC,SAAUnB,GACzBA,EAAOiC,GAAGC,SAASC,UAAU,cAAe,CAC1CC,KAAM,eACNC,QAAS,oBACTC,SAAU,WACR,OAAOtC,EAAOuC,YAAY,qBAG9BvC,EAAOiC,GAAGC,SAASM,YAAY,cAAe,CAC5CJ,KAAM,eACNK,KAAM,oBACNH,SAAU,WACR,OAAOtC,EAAOuC,YAAY,uBAO9B7C,EAAOgD,IAAI,cAAe,SAAU1C,GAClCkB,EAASC,SAASnB,GAClBgC,EAAQb,SAASnB,GACjBsB,EAASC,MAAMvB,KA9FvB","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var getKeyboardSpaces = function (editor) {\n      var spaces = editor.getParam('nonbreaking_force_tab', 0);\n      if (typeof spaces === 'boolean') {\n        return spaces === true ? 3 : 0;\n      } else {\n        return spaces;\n      }\n    };\n    var wrapNbsps = function (editor) {\n      return editor.getParam('nonbreaking_wrap', true, 'boolean');\n    };\n    var Settings = {\n      getKeyboardSpaces: getKeyboardSpaces,\n      wrapNbsps: wrapNbsps\n    };\n\n    var stringRepeat = function (string, repeats) {\n      var str = '';\n      for (var index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    var isVisualCharsEnabled = function (editor) {\n      return editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    };\n    var insertNbsp = function (editor, times) {\n      var classes = function () {\n        return isVisualCharsEnabled(editor) ? 'mce-nbsp-wrap mce-nbsp' : 'mce-nbsp-wrap';\n      };\n      var nbspSpan = function () {\n        return '<span class=\"' + classes() + '\" contenteditable=\"false\">' + stringRepeat('&nbsp;', times) + '</span>';\n      };\n      var shouldWrap = Settings.wrapNbsps(editor);\n      var html = shouldWrap || editor.plugins.visualchars ? nbspSpan() : stringRepeat('&nbsp;', times);\n      editor.undoManager.transact(function () {\n        return editor.insertContent(html);\n      });\n    };\n    var Actions = { insertNbsp: insertNbsp };\n\n    var register = function (editor) {\n      editor.addCommand('mceNonBreaking', function () {\n        Actions.insertNbsp(editor, 1);\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var setup = function (editor) {\n      var spaces = Settings.getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', function (e) {\n          if (e.keyCode === global$1.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            Actions.insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n    var Keyboard = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('nonbreaking', {\n        icon: 'non-breaking',\n        tooltip: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n      editor.ui.registry.addMenuItem('nonbreaking', {\n        icon: 'non-breaking',\n        text: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('nonbreaking', function (editor) {\n        Commands.register(editor);\n        Buttons.register(editor);\n        Keyboard.setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}