{"version":3,"sources":["visualblocks/plugin.js"],"names":["Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","Events","editor","state","fire","VisualBlocks","pluginUrl","enabledState","dom","toggleClass","getBody","Commands","register","addCommand","Settings","getParam","Bindings","setup","on","e","type","removeClass","toggleActiveState","api","setActive","editorEventCallback","off","Buttons","ui","registry","addToggleButton","icon","tooltip","onAction","execCommand","onSetup","addToggleMenuItem","text","add"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAAO,SAAUC,GACnB,IAAIC,EAAQD,EACRE,EAAM,WACR,OAAOD,GAQT,MAAO,CACLC,IAAKA,EACLC,IARQ,SAAUC,GAClBH,EAAQG,GAQRC,MANU,WACV,OAAON,EAAKG,QASZI,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAKpCC,EAHmB,SAAUC,EAAQC,GACvCD,EAAOE,KAAK,eAAgB,CAAED,MAAOA,KAUnCE,EANqB,SAAUH,EAAQI,EAAWC,GAC1CL,EAAOM,IACbC,YAAYP,EAAOQ,UAAW,oBAClCH,EAAad,KAAKc,EAAaf,OAC/BS,EAAwBC,EAAQK,EAAaf,QAS3CmB,EAAW,CAAEC,SALF,SAAUV,EAAQI,EAAWC,GAC1CL,EAAOW,WAAW,kBAAmB,WACnCR,EAAgCH,EAAQI,EAAWC,OAQnDO,EAHqB,SAAUZ,GACjC,OAAOA,EAAOa,SAAS,8BAA8B,EAAO,YAmB1DC,EAAW,CAAEC,MAfL,SAAUf,EAAQI,EAAWC,GACvCL,EAAOgB,GAAG,qCAAsC,SAAUC,GACpDZ,EAAaf,OACfU,EAAOM,IAAIC,YAAYP,EAAOQ,UAAW,mBAA+B,wBAAXS,EAAEC,QAGnElB,EAAOgB,GAAG,OAAQ,WACZJ,EAA4BZ,IAC9BG,EAAgCH,EAAQI,EAAWC,KAGvDL,EAAOgB,GAAG,SAAU,WAClBhB,EAAOM,IAAIa,YAAYnB,EAAOQ,UAAW,wBAKzCY,EAAoB,SAAUpB,EAAQK,GACxC,OAAO,SAAUgB,GACfA,EAAIC,UAAUjB,EAAaf,OAC3B,IAAIiC,EAAsB,SAAUN,GAClC,OAAOI,EAAIC,UAAUL,EAAEhB,QAGzB,OADAD,EAAOgB,GAAG,eAAgBO,GACnB,WACL,OAAOvB,EAAOwB,IAAI,eAAgBD,MAqBpCE,EAAU,CAAEf,SAjBC,SAAUV,EAAQK,GACjCL,EAAO0B,GAAGC,SAASC,gBAAgB,eAAgB,CACjDC,KAAM,eACNC,QAAS,cACTC,SAAU,WACR,OAAO/B,EAAOgC,YAAY,oBAE5BC,QAASb,EAAkBpB,EAAQK,KAErCL,EAAO0B,GAAGC,SAASO,kBAAkB,eAAgB,CACnDC,KAAM,cACNJ,SAAU,WACR,OAAO/B,EAAOgC,YAAY,oBAE5BC,QAASb,EAAkBpB,EAAQK,OAMrCX,EAAO0C,IAAI,eAAgB,SAAUpC,EAAQI,GAC3C,IAAIC,EAAelB,GAAK,GACxBsB,EAASC,SAASV,EAAQI,EAAWC,GACrCoB,EAAQf,SAASV,EAAQK,GACzBS,EAASC,MAAMf,EAAQI,EAAWC,KArG1C","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var fireVisualBlocks = function (editor, state) {\n      editor.fire('VisualBlocks', { state: state });\n    };\n    var Events = { fireVisualBlocks: fireVisualBlocks };\n\n    var toggleVisualBlocks = function (editor, pluginUrl, enabledState) {\n      var dom = editor.dom;\n      dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n      enabledState.set(!enabledState.get());\n      Events.fireVisualBlocks(editor, enabledState.get());\n    };\n    var VisualBlocks = { toggleVisualBlocks: toggleVisualBlocks };\n\n    var register = function (editor, pluginUrl, enabledState) {\n      editor.addCommand('mceVisualBlocks', function () {\n        VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n      });\n    };\n    var Commands = { register: register };\n\n    var isEnabledByDefault = function (editor) {\n      return editor.getParam('visualblocks_default_state', false, 'boolean');\n    };\n    var Settings = { isEnabledByDefault: isEnabledByDefault };\n\n    var setup = function (editor, pluginUrl, enabledState) {\n      editor.on('PreviewFormats AfterPreviewFormats', function (e) {\n        if (enabledState.get()) {\n          editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n        }\n      });\n      editor.on('init', function () {\n        if (Settings.isEnabledByDefault(editor)) {\n          VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n        }\n      });\n      editor.on('remove', function () {\n        editor.dom.removeClass(editor.getBody(), 'mce-visualblocks');\n      });\n    };\n    var Bindings = { setup: setup };\n\n    var toggleActiveState = function (editor, enabledState) {\n      return function (api) {\n        api.setActive(enabledState.get());\n        var editorEventCallback = function (e) {\n          return api.setActive(e.state);\n        };\n        editor.on('VisualBlocks', editorEventCallback);\n        return function () {\n          return editor.off('VisualBlocks', editorEventCallback);\n        };\n      };\n    };\n    var register$1 = function (editor, enabledState) {\n      editor.ui.registry.addToggleButton('visualblocks', {\n        icon: 'visualblocks',\n        tooltip: 'Show blocks',\n        onAction: function () {\n          return editor.execCommand('mceVisualBlocks');\n        },\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n      editor.ui.registry.addToggleMenuItem('visualblocks', {\n        text: 'Show blocks',\n        onAction: function () {\n          return editor.execCommand('mceVisualBlocks');\n        },\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('visualblocks', function (editor, pluginUrl) {\n        var enabledState = Cell(false);\n        Commands.register(editor, pluginUrl, enabledState);\n        Buttons.register(editor, enabledState);\n        Bindings.setup(editor, pluginUrl, enabledState);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}