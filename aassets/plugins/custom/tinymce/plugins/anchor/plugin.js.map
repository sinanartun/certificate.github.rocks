{"version":3,"sources":["anchor/plugin.js"],"names":["global","tinymce","util","Tools","resolve","Anchor","id","test","editor","selectedNode","selection","getNode","tagName","dom","getAttrib","getAttribute","removeAttribute","undoManager","add","focus","collapse","execCommand","createHTML","Dialog","currentId","windowManager","open","title","size","body","type","items","name","label","placeholder","buttons","text","primary","initialData","onSubmit","api","newId","alert","insertAnchor","getData","close","Commands","register","addCommand","setContentEditable","state","nodes","i","length","node","attr","firstChild","FilterContent","setup","on","parser","addNodeFilter","serializer","Buttons","ui","registry","addToggleButton","icon","tooltip","onAction","onSetup","buttonApi","selectorChangedWithUnbind","setActive","unbind","addMenuItem"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAuBpCC,EArBY,SAAUC,GACxB,MAAO,8BAA8BC,KAAKD,IAoBxCD,EAlBQ,SAAUG,GACpB,IAAIC,EAAeD,EAAOE,UAAUC,UAEpC,MADwC,MAAzBF,EAAaG,SAAkE,KAA/CJ,EAAOK,IAAIC,UAAUL,EAAc,QAChEA,EAAaM,aAAa,OAASN,EAAaM,aAAa,QAAU,IAevFV,EAbS,SAAUG,EAAQF,GAC7B,IAAIG,EAAeD,EAAOE,UAAUC,UACI,MAAzBF,EAAaG,SAAkE,KAA/CJ,EAAOK,IAAIC,UAAUL,EAAc,SAEhFA,EAAaO,gBAAgB,QAC7BP,EAAaH,GAAKA,EAClBE,EAAOS,YAAYC,QAEnBV,EAAOW,QACPX,EAAOE,UAAUU,UAAS,GAC1BZ,EAAOa,YAAY,oBAAoB,EAAOb,EAAOK,IAAIS,WAAW,IAAK,CAAEhB,GAAIA,OAqD/EiB,EAnCO,SAAUf,GACnB,IAAIgB,EAAYnB,EAAaG,GAC7BA,EAAOiB,cAAcC,KAAK,CACxBC,MAAO,SACPC,KAAM,SACNC,KAAM,CACJC,KAAM,QACNC,MAAO,CAAC,CACJC,KAAM,KACNF,KAAM,QACNG,MAAO,KACPC,YAAa,aAGnBC,QAAS,CACP,CACEL,KAAM,SACNE,KAAM,SACNI,KAAM,UAER,CACEN,KAAM,SACNE,KAAM,OACNI,KAAM,OACNC,SAAS,IAGbC,YAAa,CAAEhC,GAAIkB,GACnBe,SAAU,SAAUC,IArCL,SAAUhC,EAAQiC,GACnC,OAAKpC,EAAiBoC,IAIpBpC,EAAcG,EAAQiC,IACf,IAJPjC,EAAOiB,cAAciB,MAAM,2GACpB,IAmCAC,CAAanC,EAAQgC,EAAII,UAAUtC,KACtCkC,EAAIK,YAYRC,EAAW,CAAEC,SALF,SAAUvC,GACvBA,EAAOwC,WAAW,YAAa,WAC7BzB,EAAYf,OAQZyC,EAAqB,SAAUC,GACjC,OAAO,SAAUC,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,KALTE,EAMNH,EAAMC,IALdG,KAAK,UAAYD,EAAKC,KAAK,QAASD,EAAKC,KAAK,SAAaD,EAAKE,YAMvEL,EAAMC,GAAGG,KAAK,kBAAmBL,GAPtB,IAAUI,IAkBzBG,EAAgB,CAAEC,MANV,SAAUlD,GACpBA,EAAOmD,GAAG,UAAW,WACnBnD,EAAOoD,OAAOC,cAAc,IAAKZ,EAAmB,UACpDzC,EAAOsD,WAAWD,cAAc,IAAKZ,EAAmB,WAwBxDc,EAAU,CAAEhB,SAnBC,SAAUvC,GACzBA,EAAOwD,GAAGC,SAASC,gBAAgB,SAAU,CAC3CC,KAAM,WACNC,QAAS,SACTC,SAAU,WACR,OAAO7D,EAAOa,YAAY,cAE5BiD,QAAS,SAAUC,GACjB,OAAO/D,EAAOE,UAAU8D,0BAA0B,gBAAiBD,EAAUE,WAAWC,UAG5FlE,EAAOwD,GAAGC,SAASU,YAAY,SAAU,CACvCR,KAAM,WACN/B,KAAM,YACNiC,SAAU,WACR,OAAO7D,EAAOa,YAAY,kBAO9BrB,EAAOkB,IAAI,SAAU,SAAUV,GAC7BiD,EAAcC,MAAMlD,GACpBsC,EAASC,SAASvC,GAClBuD,EAAQhB,SAASvC,KAlIzB","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var isValidId = function (id) {\n      return /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    };\n    var getId = function (editor) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      return isAnchor ? selectedNode.getAttribute('id') || selectedNode.getAttribute('name') : '';\n    };\n    var insert = function (editor, id) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      if (isAnchor) {\n        selectedNode.removeAttribute('name');\n        selectedNode.id = id;\n        editor.undoManager.add();\n      } else {\n        editor.focus();\n        editor.selection.collapse(true);\n        editor.execCommand('mceInsertContent', false, editor.dom.createHTML('a', { id: id }));\n      }\n    };\n    var Anchor = {\n      isValidId: isValidId,\n      getId: getId,\n      insert: insert\n    };\n\n    var insertAnchor = function (editor, newId) {\n      if (!Anchor.isValidId(newId)) {\n        editor.windowManager.alert('Id should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return true;\n      } else {\n        Anchor.insert(editor, newId);\n        return false;\n      }\n    };\n    var open = function (editor) {\n      var currentId = Anchor.getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        size: 'normal',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'id',\n              type: 'input',\n              label: 'ID',\n              placeholder: 'example'\n            }]\n        },\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: { id: currentId },\n        onSubmit: function (api) {\n          if (!insertAnchor(editor, api.getData().id)) {\n            api.close();\n          }\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mceAnchor', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var isAnchorNode = function (node) {\n      return !node.attr('href') && (node.attr('id') || node.attr('name')) && !node.firstChild;\n    };\n    var setContentEditable = function (state) {\n      return function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (isAnchorNode(nodes[i])) {\n            nodes[i].attr('contenteditable', state);\n          }\n        }\n      };\n    };\n    var setup = function (editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addToggleButton('anchor', {\n        icon: 'bookmark',\n        tooltip: 'Anchor',\n        onAction: function () {\n          return editor.execCommand('mceAnchor');\n        },\n        onSetup: function (buttonApi) {\n          return editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n        }\n      });\n      editor.ui.registry.addMenuItem('anchor', {\n        icon: 'bookmark',\n        text: 'Anchor...',\n        onAction: function () {\n          return editor.execCommand('mceAnchor');\n        }\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('anchor', function (editor) {\n        FilterContent.setup(editor);\n        Commands.register(editor);\n        Buttons.register(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}