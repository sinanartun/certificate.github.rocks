{"version":3,"sources":["autoresize/plugin.js"],"names":["Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","global$1","global$2","Events","editor","fire","Settings","getParam","getElement","offsetHeight","wait","oldSize","times","interval","callback","setEditorTimeout","resize","toggleScrolling","state","body","getBody","style","overflowY","scrollTop","parseCssValueToInt","dom","elm","name","computed","parseInt","getStyle","isNaN","deltaSize","resizeHeight","contentHeight","doc","getDoc","plugins","fullscreen","isFullscreen","docEle","documentElement","resizeBottomMargin","marginTop","marginBottom","chromeHeight","getContainer","getContentAreaContainer","maxHeight","setStyle","browser","isSafari","mac","win","getWin","scrollTo","pageXOffset","pageYOffset","hasFocus","selection","scrollIntoView","getNode","webkit","Resize","setup","on","overflowPadding","setStyles","paddingLeft","paddingRight","min-height","Commands","register","addCommand","add","settings","hasOwnProperty","inline"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAAO,SAAUC,GACnB,IAAIC,EAAQD,EACRE,EAAM,WACR,OAAOD,GAQT,MAAO,CACLC,IAAKA,EACLC,IARQ,SAAUC,GAClBH,EAAQG,GAQRC,MANU,WACV,OAAON,EAAKG,QASZI,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,sBAKtCG,EAHmB,SAAUC,GAC/B,OAAOA,EAAOC,KAAK,iBAmBjBC,EAfyB,SAAUF,GACrC,OAAOA,EAAOG,SAAS,aAAcH,EAAOI,aAAaC,aAAc,WAcrEH,EAZyB,SAAUF,GACrC,OAAOA,EAAOG,SAAS,aAAc,EAAG,WAWtCD,EAT+B,SAAUF,GAC3C,OAAOA,EAAOG,SAAS,8BAA+B,EAAG,WAQvDD,EAN4B,SAAUF,GACxC,OAAOA,EAAOG,SAAS,2BAA4B,GAAI,WAKrDD,EAHyB,SAAUF,GACrC,OAAOA,EAAOG,SAAS,sBAAsB,EAAM,YAajDG,EAAO,SAAUN,EAAQO,EAASC,EAAOC,EAAUC,GACrDZ,EAASa,iBAAiBX,EAAQ,WAChCY,EAAOZ,EAAQO,GACXC,IACFF,EAAKN,EAAQO,EAASC,EAAOC,EAAUC,GAC9BA,GACTA,KAEDD,IAEDI,EAAkB,SAAUb,EAAQc,GACtC,IAAIC,EAAOf,EAAOgB,UACdD,IACFA,EAAKE,MAAMC,UAAYJ,EAAQ,GAAK,SAC/BA,IACHC,EAAKI,UAAY,KAInBC,EAAqB,SAAUC,EAAKC,EAAKC,EAAMC,GACjD,IAAIrC,EAAQsC,SAASJ,EAAIK,SAASJ,EAAKC,EAAMC,GAAW,IACxD,OAAOG,MAAMxC,GAAS,EAAIA,GAExByB,EAAS,SAAUZ,EAAQO,GAC7B,IAAIqB,EAAWC,EAAcC,EACzBT,EAAMrB,EAAOqB,IACbU,EAAM/B,EAAOgC,SACjB,GAAKD,EAGL,GAjCiB,SAAU/B,GAC3B,OAAOA,EAAOiC,QAAQC,YAAclC,EAAOiC,QAAQC,WAAWC,eAgC1DA,CAAanC,GACfa,EAAgBb,GAAQ,OAD1B,CAIA,IAAIoC,EAASL,EAAIM,gBACbC,EAAqBpC,EAAmCF,GAC5D6B,EAAe3B,EAAgCF,GAC/C,IAAIuC,EAAYnB,EAAmBC,EAAKe,EAAQ,cAAc,GAC1DI,EAAepB,EAAmBC,EAAKe,EAAQ,iBAAiB,IACpEN,EAAgBM,EAAO/B,aAAekC,EAAYC,EAAeF,GAC7C,IAClBR,EAAgB,GAElB,IAEIW,EAFkBzC,EAAO0C,eAAerC,aACpBL,EAAO2C,0BAA0BtC,aAErDyB,EAAgBW,EAAevC,EAAgCF,KACjE6B,EAAeC,EAAgBW,GAEjC,IAAIG,EAAY1C,EAAgCF,GAOhD,GANI4C,GAAaf,EAAee,GAC9Bf,EAAee,EACf/B,EAAgBb,GAAQ,IAExBa,EAAgBb,GAAQ,GAEtB6B,IAAiBtB,EAAQnB,MAAO,CAKlC,GAJAwC,EAAYC,EAAetB,EAAQnB,MACnCiC,EAAIwB,SAAS7C,EAAO0C,eAAgB,SAAUb,EAAe,MAC7DtB,EAAQlB,IAAIwC,GACZ9B,EAAwBC,GACpBH,EAASiD,QAAQC,YAAclD,EAASmD,IAAK,CAC/C,IAAIC,EAAMjD,EAAOkD,SACjBD,EAAIE,SAASF,EAAIG,YAAaH,EAAII,aAEhCrD,EAAOsD,YACTtD,EAAOuD,UAAUC,eAAexD,EAAOuD,UAAUE,WAE/C5D,EAAS6D,QAAU9B,EAAY,GACjChB,EAAOZ,EAAQO,MAyBjBoD,EAAS,CACXC,MAtBU,SAAU5D,EAAQO,GAC5BP,EAAO6D,GAAG,OAAQ,WAChB,IAAIC,EAAkB5D,EAAsCF,GAClDA,EAAOqB,IACb0C,UAAU/D,EAAOgB,UAAW,CAC9BgD,YAAeF,EACfG,aAAgBH,EAChBI,aAAc,MAGlBlE,EAAO6D,GAAG,mEAAoE,WAC5EjD,EAAOZ,EAAQO,KAEbL,EAAgCF,IAClCA,EAAO6D,GAAG,OAAQ,WAChBvD,EAAKN,EAAQO,EAAS,GAAI,IAAK,WAC7BD,EAAKN,EAAQO,EAAS,EAAG,UAO/BK,OAAQA,GAQNuD,EAAW,CAAEC,SALF,SAAUpE,EAAQO,GAC/BP,EAAOqE,WAAW,gBAAiB,WACjCV,EAAO/C,OAAOZ,EAAQO,OAMxBf,EAAO8E,IAAI,aAAc,SAAUtE,GAIjC,GAHKA,EAAOuE,SAASC,eAAe,YAClCxE,EAAOuE,SAAS3D,QAAS,IAEtBZ,EAAOyE,OAAQ,CAClB,IAAIlE,EAAUtB,EAAK,GACnBkF,EAASC,SAASpE,EAAQO,GAC1BoD,EAAOC,MAAM5D,EAAQO,MA5K/B","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var fireResizeEditor = function (editor) {\n      return editor.fire('ResizeEditor');\n    };\n    var Events = { fireResizeEditor: fireResizeEditor };\n\n    var getAutoResizeMinHeight = function (editor) {\n      return editor.getParam('min_height', editor.getElement().offsetHeight, 'number');\n    };\n    var getAutoResizeMaxHeight = function (editor) {\n      return editor.getParam('max_height', 0, 'number');\n    };\n    var getAutoResizeOverflowPadding = function (editor) {\n      return editor.getParam('autoresize_overflow_padding', 1, 'number');\n    };\n    var getAutoResizeBottomMargin = function (editor) {\n      return editor.getParam('autoresize_bottom_margin', 50, 'number');\n    };\n    var shouldAutoResizeOnInit = function (editor) {\n      return editor.getParam('autoresize_on_init', true, 'boolean');\n    };\n    var Settings = {\n      getAutoResizeMinHeight: getAutoResizeMinHeight,\n      getAutoResizeMaxHeight: getAutoResizeMaxHeight,\n      getAutoResizeOverflowPadding: getAutoResizeOverflowPadding,\n      getAutoResizeBottomMargin: getAutoResizeBottomMargin,\n      shouldAutoResizeOnInit: shouldAutoResizeOnInit\n    };\n\n    var isFullscreen = function (editor) {\n      return editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    };\n    var wait = function (editor, oldSize, times, interval, callback) {\n      global$2.setEditorTimeout(editor, function () {\n        resize(editor, oldSize);\n        if (times--) {\n          wait(editor, oldSize, times, interval, callback);\n        } else if (callback) {\n          callback();\n        }\n      }, interval);\n    };\n    var toggleScrolling = function (editor, state) {\n      var body = editor.getBody();\n      if (body) {\n        body.style.overflowY = state ? '' : 'hidden';\n        if (!state) {\n          body.scrollTop = 0;\n        }\n      }\n    };\n    var parseCssValueToInt = function (dom, elm, name, computed) {\n      var value = parseInt(dom.getStyle(elm, name, computed), 10);\n      return isNaN(value) ? 0 : value;\n    };\n    var resize = function (editor, oldSize) {\n      var deltaSize, resizeHeight, contentHeight;\n      var dom = editor.dom;\n      var doc = editor.getDoc();\n      if (!doc) {\n        return;\n      }\n      if (isFullscreen(editor)) {\n        toggleScrolling(editor, true);\n        return;\n      }\n      var docEle = doc.documentElement;\n      var resizeBottomMargin = Settings.getAutoResizeBottomMargin(editor);\n      resizeHeight = Settings.getAutoResizeMinHeight(editor);\n      var marginTop = parseCssValueToInt(dom, docEle, 'margin-top', true);\n      var marginBottom = parseCssValueToInt(dom, docEle, 'margin-bottom', true);\n      contentHeight = docEle.offsetHeight + marginTop + marginBottom + resizeBottomMargin;\n      if (contentHeight < 0) {\n        contentHeight = 0;\n      }\n      var containerHeight = editor.getContainer().offsetHeight;\n      var contentAreaHeight = editor.getContentAreaContainer().offsetHeight;\n      var chromeHeight = containerHeight - contentAreaHeight;\n      if (contentHeight + chromeHeight > Settings.getAutoResizeMinHeight(editor)) {\n        resizeHeight = contentHeight + chromeHeight;\n      }\n      var maxHeight = Settings.getAutoResizeMaxHeight(editor);\n      if (maxHeight && resizeHeight > maxHeight) {\n        resizeHeight = maxHeight;\n        toggleScrolling(editor, true);\n      } else {\n        toggleScrolling(editor, false);\n      }\n      if (resizeHeight !== oldSize.get()) {\n        deltaSize = resizeHeight - oldSize.get();\n        dom.setStyle(editor.getContainer(), 'height', resizeHeight + 'px');\n        oldSize.set(resizeHeight);\n        Events.fireResizeEditor(editor);\n        if (global$1.browser.isSafari() && global$1.mac) {\n          var win = editor.getWin();\n          win.scrollTo(win.pageXOffset, win.pageYOffset);\n        }\n        if (editor.hasFocus()) {\n          editor.selection.scrollIntoView(editor.selection.getNode());\n        }\n        if (global$1.webkit && deltaSize < 0) {\n          resize(editor, oldSize);\n        }\n      }\n    };\n    var setup = function (editor, oldSize) {\n      editor.on('init', function () {\n        var overflowPadding = Settings.getAutoResizeOverflowPadding(editor);\n        var dom = editor.dom;\n        dom.setStyles(editor.getBody(), {\n          'paddingLeft': overflowPadding,\n          'paddingRight': overflowPadding,\n          'min-height': 0\n        });\n      });\n      editor.on('NodeChange SetContent keyup FullscreenStateChanged ResizeContent', function () {\n        resize(editor, oldSize);\n      });\n      if (Settings.shouldAutoResizeOnInit(editor)) {\n        editor.on('init', function () {\n          wait(editor, oldSize, 20, 100, function () {\n            wait(editor, oldSize, 5, 1000);\n          });\n        });\n      }\n    };\n    var Resize = {\n      setup: setup,\n      resize: resize\n    };\n\n    var register = function (editor, oldSize) {\n      editor.addCommand('mceAutoResize', function () {\n        Resize.resize(editor, oldSize);\n      });\n    };\n    var Commands = { register: register };\n\n    function Plugin () {\n      global.add('autoresize', function (editor) {\n        if (!editor.settings.hasOwnProperty('resize')) {\n          editor.settings.resize = false;\n        }\n        if (!editor.inline) {\n          var oldSize = Cell(0);\n          Commands.register(editor, oldSize);\n          Resize.setup(editor, oldSize);\n        }\n      });\n    }\n\n    Plugin();\n\n}());\n"]}