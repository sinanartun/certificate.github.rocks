{"version":3,"sources":["save/plugin.js"],"names":["global","tinymce","util","Tools","resolve","global$1","global$2","Settings","editor","getParam","displayErrorMessage","message","notificationManager","open","text","type","Actions","formObj","DOM","getParent","id","isDirty","save","execCallback","nodeChanged","setDirty","onsubmit","submit","h","trim","startContent","resetContent","Commands","register","addCommand","stateToggle","api","handler","setDisabled","on","off","Buttons","ui","registry","addButton","icon","tooltip","disabled","onAction","execCommand","onSetup","addShortcut","add"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,sBAWtCG,EATkB,SAAUC,GAC9B,OAAOA,EAAOC,SAAS,wBAAwB,IAQ7CF,EANoB,SAAUC,GAChC,QAASA,EAAOC,SAAS,wBAKvBF,EAHsB,SAAUC,GAClC,QAASA,EAAOC,SAAS,0BAQvBC,EAAsB,SAAUF,EAAQG,GAC1CH,EAAOI,oBAAoBC,KAAK,CAC9BC,KAAMH,EACNI,KAAM,WAqCNC,EAlCO,SAAUR,GACnB,IAAIS,EAEJ,GADAA,EAAUZ,EAASa,IAAIC,UAAUX,EAAOY,GAAI,SACxCb,EAAyBC,IAAYA,EAAOa,UAAhD,CAIA,GADAb,EAAOc,OACHf,EAA2BC,GAG7B,OAFAA,EAAOe,aAAa,sBAAuBf,QAC3CA,EAAOgB,cAGLP,GACFT,EAAOiB,UAAS,GACXR,EAAQS,WAAYT,EAAQS,aACD,mBAAnBT,EAAQU,OACjBV,EAAQU,SAERjB,EAAoBF,EAAQ,wCAGhCA,EAAOgB,eAEPd,EAAoBF,EAAQ,mCAW5BQ,EARS,SAAUR,GACrB,IAAIoB,EAAItB,EAASuB,KAAKrB,EAAOsB,cACzBvB,EAA6BC,GAC/BA,EAAOe,aAAa,wBAAyBf,GAG/CA,EAAOuB,aAAaH,IAelBI,EAAW,CAAEC,SARF,SAAUzB,GACvBA,EAAO0B,WAAW,UAAW,WAC3BlB,EAAaR,KAEfA,EAAO0B,WAAW,YAAa,WAC7BlB,EAAeR,OAKf2B,EAAc,SAAU3B,GAC1B,OAAO,SAAU4B,GACf,IAAIC,EAAU,WACZD,EAAIE,YAAY/B,EAAyBC,KAAYA,EAAOa,YAG9D,OADAb,EAAO+B,GAAG,mBAAoBF,GACvB,WACL,OAAO7B,EAAOgC,IAAI,mBAAoBH,MAyBxCI,EAAU,CAAER,SArBC,SAAUzB,GACzBA,EAAOkC,GAAGC,SAASC,UAAU,OAAQ,CACnCC,KAAM,OACNC,QAAS,OACTC,UAAU,EACVC,SAAU,WACR,OAAOxC,EAAOyC,YAAY,YAE5BC,QAASf,EAAY3B,KAEvBA,EAAOkC,GAAGC,SAASC,UAAU,SAAU,CACrCC,KAAM,SACNC,QAAS,SACTC,UAAU,EACVC,SAAU,WACR,OAAOxC,EAAOyC,YAAY,cAE5BC,QAASf,EAAY3B,KAEvBA,EAAO2C,YAAY,SAAU,GAAI,aAKjCnD,EAAOoD,IAAI,OAAQ,SAAU5C,GAC3BiC,EAAQR,SAASzB,GACjBwB,EAASC,SAASzB,KApH1B","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var enableWhenDirty = function (editor) {\n      return editor.getParam('save_enablewhendirty', true);\n    };\n    var hasOnSaveCallback = function (editor) {\n      return !!editor.getParam('save_onsavecallback');\n    };\n    var hasOnCancelCallback = function (editor) {\n      return !!editor.getParam('save_oncancelcallback');\n    };\n    var Settings = {\n      enableWhenDirty: enableWhenDirty,\n      hasOnSaveCallback: hasOnSaveCallback,\n      hasOnCancelCallback: hasOnCancelCallback\n    };\n\n    var displayErrorMessage = function (editor, message) {\n      editor.notificationManager.open({\n        text: message,\n        type: 'error'\n      });\n    };\n    var save = function (editor) {\n      var formObj;\n      formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (Settings.enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      if (Settings.hasOnSaveCallback(editor)) {\n        editor.execCallback('save_onsavecallback', editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    var cancel = function (editor) {\n      var h = global$2.trim(editor.startContent);\n      if (Settings.hasOnCancelCallback(editor)) {\n        editor.execCallback('save_oncancelcallback', editor);\n        return;\n      }\n      editor.resetContent(h);\n    };\n    var Actions = {\n      save: save,\n      cancel: cancel\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceSave', function () {\n        Actions.save(editor);\n      });\n      editor.addCommand('mceCancel', function () {\n        Actions.cancel(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var stateToggle = function (editor) {\n      return function (api) {\n        var handler = function () {\n          api.setDisabled(Settings.enableWhenDirty(editor) && !editor.isDirty());\n        };\n        editor.on('NodeChange dirty', handler);\n        return function () {\n          return editor.off('NodeChange dirty', handler);\n        };\n      };\n    };\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('save', {\n        icon: 'save',\n        tooltip: 'Save',\n        disabled: true,\n        onAction: function () {\n          return editor.execCommand('mceSave');\n        },\n        onSetup: stateToggle(editor)\n      });\n      editor.ui.registry.addButton('cancel', {\n        icon: 'cancel',\n        tooltip: 'Cancel',\n        disabled: true,\n        onAction: function () {\n          return editor.execCommand('mceCancel');\n        },\n        onSetup: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('save', function (editor) {\n        Buttons.register(editor);\n        Commands.register(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}