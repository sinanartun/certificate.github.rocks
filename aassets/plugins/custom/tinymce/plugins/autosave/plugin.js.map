{"version":3,"sources":["autosave/plugin.js"],"names":["domGlobals","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","global$1","global$2","global$3","parse","timeString","defaultTime","toParse","parsedTime","exec","s","m","parseInt","getAutoSavePrefix","editor","prefix","getParam","replace","document","location","pathname","search","hash","id","shouldRestoreWhenEmpty","isEmpty","html","forcedRootBlockName","settings","forced_root_block","trim","getBody","innerHTML","RegExp","test","hasDraft","time","getItem","Date","getTime","autosave_retention","getAutoSaveRetention","removeDraft","fire","removeItem","fireRemoveDraft","storeDraft","isDirty","setItem","getContent","format","no_events","toString","fireStoreDraft","restoreDraft","setContent","fireRestoreDraft","startStoreDraft","started","interval","autosave_interval","getAutoSaveInterval","setInterval","removed","restoreLastDraft","undoManager","transact","focus","curry","fn","initialArgs","_i","arguments","length","restArgs","all","concat","apply","global$4","setup","editorManager","on","e","msg","each","plugins","autosave","shouldAskBeforeUnload","translate","preventDefault","returnValue","makeSetupHandler","api","setDisabled","editorEventCallback","off","register","ui","registry","addButton","tooltip","icon","onAction","onSetup","addMenuItem","text","add","dom","window"],"mappings":"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","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var fireRestoreDraft = function (editor) {\n      return editor.fire('RestoreDraft');\n    };\n    var fireStoreDraft = function (editor) {\n      return editor.fire('StoreDraft');\n    };\n    var fireRemoveDraft = function (editor) {\n      return editor.fire('RemoveDraft');\n    };\n\n    var parse = function (timeString, defaultTime) {\n      var multiples = {\n        s: 1000,\n        m: 60000\n      };\n      var toParse = timeString || defaultTime;\n      var parsedTime = /^(\\d+)([ms]?)$/.exec('' + toParse);\n      return (parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(toParse, 10);\n    };\n\n    var shouldAskBeforeUnload = function (editor) {\n      return editor.getParam('autosave_ask_before_unload', true);\n    };\n    var getAutoSavePrefix = function (editor) {\n      var prefix = editor.getParam('autosave_prefix', 'tinymce-autosave-{path}{query}{hash}-{id}-');\n      prefix = prefix.replace(/\\{path\\}/g, domGlobals.document.location.pathname);\n      prefix = prefix.replace(/\\{query\\}/g, domGlobals.document.location.search);\n      prefix = prefix.replace(/\\{hash\\}/g, domGlobals.document.location.hash);\n      prefix = prefix.replace(/\\{id\\}/g, editor.id);\n      return prefix;\n    };\n    var shouldRestoreWhenEmpty = function (editor) {\n      return editor.getParam('autosave_restore_when_empty', false);\n    };\n    var getAutoSaveInterval = function (editor) {\n      return parse(editor.settings.autosave_interval, '30s');\n    };\n    var getAutoSaveRetention = function (editor) {\n      return parse(editor.settings.autosave_retention, '20m');\n    };\n\n    var isEmpty = function (editor, html) {\n      var forcedRootBlockName = editor.settings.forced_root_block;\n      html = global$3.trim(typeof html === 'undefined' ? editor.getBody().innerHTML : html);\n      return html === '' || new RegExp('^<' + forcedRootBlockName + '[^>]*>((\\xA0|&nbsp;|[ \\t]|<br[^>]*>)+?|)</' + forcedRootBlockName + '>|<br>$', 'i').test(html);\n    };\n    var hasDraft = function (editor) {\n      var time = parseInt(global$2.getItem(getAutoSavePrefix(editor) + 'time'), 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    var removeDraft = function (editor, fire) {\n      var prefix = getAutoSavePrefix(editor);\n      global$2.removeItem(prefix + 'draft');\n      global$2.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    var storeDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$2.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$2.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    var restoreDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent(global$2.getItem(prefix + 'draft'), { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    var startStoreDraft = function (editor, started) {\n      var interval = getAutoSaveInterval(editor);\n      if (!started.get()) {\n        global$1.setInterval(function () {\n          if (!editor.removed) {\n            storeDraft(editor);\n          }\n        }, interval);\n        started.set(true);\n      }\n    };\n    var restoreLastDraft = function (editor) {\n      editor.undoManager.transact(function () {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    function curry(fn) {\n      var initialArgs = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        initialArgs[_i - 1] = arguments[_i];\n      }\n      return function () {\n        var restArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          restArgs[_i] = arguments[_i];\n        }\n        var all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n\n    var get = function (editor) {\n      return {\n        hasDraft: curry(hasDraft, editor),\n        storeDraft: curry(storeDraft, editor),\n        restoreDraft: curry(restoreDraft, editor),\n        removeDraft: curry(removeDraft, editor),\n        isEmpty: curry(isEmpty, editor)\n      };\n    };\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var setup = function (editor) {\n      editor.editorManager.on('BeforeUnload', function (e) {\n        var msg;\n        global$3.each(global$4.get(), function (editor) {\n          if (editor.plugins.autosave) {\n            editor.plugins.autosave.storeDraft();\n          }\n          if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n            msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n          }\n        });\n        if (msg) {\n          e.preventDefault();\n          e.returnValue = msg;\n        }\n      });\n    };\n\n    var makeSetupHandler = function (editor, started) {\n      return function (api) {\n        api.setDisabled(!hasDraft(editor));\n        var editorEventCallback = function () {\n          return api.setDisabled(!hasDraft(editor));\n        };\n        editor.on('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n        return function () {\n          return editor.off('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n        };\n      };\n    };\n    var register = function (editor, started) {\n      startStoreDraft(editor, started);\n      editor.ui.registry.addButton('restoredraft', {\n        tooltip: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction: function () {\n          restoreLastDraft(editor);\n        },\n        onSetup: makeSetupHandler(editor)\n      });\n      editor.ui.registry.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction: function () {\n          restoreLastDraft(editor);\n        },\n        onSetup: makeSetupHandler(editor)\n      });\n    };\n\n    function Plugin () {\n      global.add('autosave', function (editor) {\n        var started = Cell(false);\n        setup(editor);\n        register(editor, started);\n        editor.on('init', function () {\n          if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n            restoreDraft(editor);\n          }\n        });\n        return get(editor);\n      });\n    }\n\n    Plugin();\n\n}(window));\n"]}