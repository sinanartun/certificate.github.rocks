{"version":3,"sources":["preview/plugin.js"],"names":["global","tinymce","util","Tools","resolve","global$1","Settings","editor","getParam","global$2","IframeContent","headHtml","encode","dom","contentStyle","documentBaseURI","getURI","cors","each","contentCSS","url","toAbsolute","bodyId","settings","body_id","indexOf","id","bodyClass","body_class","preventClicksOnLinksScript","mac","directionality","getBody","dir","dirAttr","getContent","Commands","register","addCommand","content","windowManager","open","title","size","body","type","items","name","sandboxed","buttons","text","primary","initialData","preview","focus","Buttons","ui","registry","addButton","icon","tooltip","onAction","execCommand","addMenuItem","add"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,sBActCE,EANkB,SAAUC,GAC9B,OAAOA,EAAOC,SAAS,gBAAiB,KAKtCF,EAH0B,SAAUC,GACtC,OAAOA,EAAOC,SAAS,oBAAoB,EAAO,YAShDC,EAAWR,QAAQC,KAAKC,MAAMC,QAAQ,eA+BtCM,EA7BiB,SAAUH,GAC7B,IAAII,EAAW,GACXC,EAASL,EAAOM,IAAID,OACpBE,EAAeR,EAAyBC,GAC5CI,GAAY,eAAiBC,EAAOL,EAAOQ,gBAAgBC,UAAY,KACnEF,IACFH,GAAY,0BAA4BG,EAAe,YAEzD,IAAIG,EAAOX,EAAiCC,GAAU,2BAA6B,GACnFF,EAASa,KAAKX,EAAOY,WAAY,SAAUC,GACzCT,GAAY,gDAAkDC,EAAOL,EAAOQ,gBAAgBM,WAAWD,IAAQ,IAAMH,EAAO,MAE9H,IAAIK,EAASf,EAAOgB,SAASC,SAAW,WACX,IAAzBF,EAAOG,QAAQ,OAEjBH,GADAA,EAASf,EAAOC,SAAS,UAAW,GAAI,SACxBD,EAAOmB,KAAOJ,GAEhC,IAAIK,EAAYpB,EAAOgB,SAASK,YAAc,IACd,IAA5BD,EAAUF,QAAQ,OAEpBE,GADAA,EAAYpB,EAAOC,SAAS,aAAc,GAAI,SACxBD,EAAOmB,KAAO,IAEtC,IACIG,EAA6B,4KADVpB,EAASqB,IAAM,YAAc,0BAC4L,iDAC5OC,EAAiBxB,EAAOyB,UAAUC,IAClCC,EAAUH,EAAiB,SAAWnB,EAAOmB,GAAkB,IAAM,GAEzE,MADkB,8BAA0CpB,EAAW,oBAA2BC,EAAOU,GAAU,6BAA+BV,EAAOe,GAAa,IAAMO,EAAU,IAAM3B,EAAO4B,aAAeN,EAA6B,kBAkC7OO,EAAW,CAAEC,SALF,SAAU9B,GACvBA,EAAO+B,WAAW,aAAc,YAzBvB,SAAU/B,GACnB,IAAIgC,EAAU7B,EAA6BH,GAC7BA,EAAOiC,cAAcC,KAAK,CACtCC,MAAO,UACPC,KAAM,QACNC,KAAM,CACJC,KAAM,QACNC,MAAO,CAAC,CACJC,KAAM,UACNF,KAAM,SACNG,WAAW,KAGjBC,QAAS,CAAC,CACNJ,KAAM,SACNE,KAAM,QACNG,KAAM,QACNC,SAAS,IAEbC,YAAa,CAAEC,QAASd,KAElBe,MAAM,SAKZb,CAAKlC,OAqBLgD,EAAU,CAAElB,SAhBC,SAAU9B,GACzBA,EAAOiD,GAAGC,SAASC,UAAU,UAAW,CACtCC,KAAM,UACNC,QAAS,UACTC,SAAU,WACR,OAAOtD,EAAOuD,YAAY,iBAG9BvD,EAAOiD,GAAGC,SAASM,YAAY,UAAW,CACxCJ,KAAM,UACNT,KAAM,UACNW,SAAU,WACR,OAAOtD,EAAOuD,YAAY,mBAO9B9D,EAAOgE,IAAI,UAAW,SAAUzD,GAC9B6B,EAASC,SAAS9B,GAClBgD,EAAQlB,SAAS9B,KA/GzB","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getPreviewDialogWidth = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_width', '650'), 10);\n    };\n    var getPreviewDialogHeight = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_height', '500'), 10);\n    };\n    var getContentStyle = function (editor) {\n      return editor.getParam('content_style', '');\n    };\n    var shouldUseContentCssCors = function (editor) {\n      return editor.getParam('content_css_cors', false, 'boolean');\n    };\n    var Settings = {\n      getPreviewDialogWidth: getPreviewDialogWidth,\n      getPreviewDialogHeight: getPreviewDialogHeight,\n      getContentStyle: getContentStyle,\n      shouldUseContentCssCors: shouldUseContentCssCors\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getPreviewHtml = function (editor) {\n      var headHtml = '';\n      var encode = editor.dom.encode;\n      var contentStyle = Settings.getContentStyle(editor);\n      headHtml += '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">';\n      if (contentStyle) {\n        headHtml += '<style type=\"text/css\">' + contentStyle + '</style>';\n      }\n      var cors = Settings.shouldUseContentCssCors(editor) ? ' crossorigin=\"anonymous\"' : '';\n      global$1.each(editor.contentCSS, function (url) {\n        headHtml += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + encode(editor.documentBaseURI.toAbsolute(url)) + '\"' + cors + '>';\n      });\n      var bodyId = editor.settings.body_id || 'tinymce';\n      if (bodyId.indexOf('=') !== -1) {\n        bodyId = editor.getParam('body_id', '', 'hash');\n        bodyId = bodyId[editor.id] || bodyId;\n      }\n      var bodyClass = editor.settings.body_class || '';\n      if (bodyClass.indexOf('=') !== -1) {\n        bodyClass = editor.getParam('body_class', '', 'hash');\n        bodyClass = bodyClass[editor.id] || '';\n      }\n      var isMetaKeyPressed = global$2.mac ? 'e.metaKey' : 'e.ctrlKey && !e.altKey';\n      var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\" && !(' + isMetaKeyPressed + ')) {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '</script> ';\n      var directionality = editor.getBody().dir;\n      var dirAttr = directionality ? ' dir=\"' + encode(directionality) + '\"' : '';\n      var previewHtml = '<!DOCTYPE html>' + '<html>' + '<head>' + headHtml + '</head>' + '<body id=\"' + encode(bodyId) + '\" class=\"mce-content-body ' + encode(bodyClass) + '\"' + dirAttr + '>' + editor.getContent() + preventClicksOnLinksScript + '</body>' + '</html>';\n      return previewHtml;\n    };\n    var IframeContent = { getPreviewHtml: getPreviewHtml };\n\n    var open = function (editor) {\n      var content = IframeContent.getPreviewHtml(editor);\n      var dataApi = editor.windowManager.open({\n        title: 'Preview',\n        size: 'large',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'preview',\n              type: 'iframe',\n              sandboxed: true\n            }]\n        },\n        buttons: [{\n            type: 'cancel',\n            name: 'close',\n            text: 'Close',\n            primary: true\n          }],\n        initialData: { preview: content }\n      });\n      dataApi.focus('close');\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mcePreview', function () {\n        open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('preview', {\n        icon: 'preview',\n        tooltip: 'Preview',\n        onAction: function () {\n          return editor.execCommand('mcePreview');\n        }\n      });\n      editor.ui.registry.addMenuItem('preview', {\n        icon: 'preview',\n        text: 'Preview',\n        onAction: function () {\n          return editor.execCommand('mcePreview');\n        }\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('preview', function (editor) {\n        Commands.register(editor);\n        Buttons.register(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}